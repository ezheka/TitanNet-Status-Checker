import json
import time
import signal
import os
import threading
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.microsoft import EdgeChromiumDriverManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∏–∑ —Ñ–∞–π–ª–∞
with open("device_ids.txt", "r") as f:
    DEVICE_IDS = [line.strip() for line in f.readlines() if line.strip()]

BASE_URL = "https://test1.titannet.io/nodeidDetail"
NUM_THREADS = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ Ctrl+C
stop_flag = threading.Event()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ctrl+C
def signal_handler(sig, frame):
    print("\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ... –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã.")
    stop_flag.set()
    exit(0)

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Ctrl+C
signal.signal(signal.SIGINT, signal_handler)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
try:
    with open("results.json", "r", encoding="utf-8") as f:
        results = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    results = defaultdict(list)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
def get_device_status(index, total_ids, device_id):
    if stop_flag.is_set():  # –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ Ctrl+C, –≤—ã—Ö–æ–¥–∏–º
        return None

    print(f"üîç [{index+1}/{total_ids}] –ü—Ä–æ–≤–µ—Ä—è—é: {device_id}")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebDriver
    options = Options()
    options.add_argument("--headless")  # –ú–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –æ–∫–Ω–∞
    options.add_argument("--ignore-certificate-errors")
    options.add_argument("--log-level=3")
    options.add_argument("--disable-logging")
    options.add_argument("--disable-dev-shm-usage")

    service = Service(EdgeChromiumDriverManager().install())
    if os.name == "nt":  
        service.creationflags = 0x08000000  # –û—Ç–∫–ª—é—á–∞–µ–º DevTools –ª–æ–≥–∏

    driver = webdriver.Edge(service=service, options=options)

    url = f"{BASE_URL}?device_id={device_id}"
    attempts = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    for attempt in range(attempts):
        if stop_flag.is_set():
            driver.quit()
            return None

        try:
            driver.get(url)
            time.sleep(3)

            node_status_block = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'Node Status:')]/following-sibling::div"))
            )

            status_text = node_status_block.find_elements(By.TAG_NAME, "span")[1].text.strip()
            driver.quit()
            
            print(f"‚úÖ [{index+1}/{total_ids}] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {device_id} ‚Üí {status_text}")
            return {status_text: device_id}

        except:
            print(f"‚ö†Ô∏è [{index+1}/{total_ids}] –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä {attempt+1}/{attempts} –¥–ª—è {device_id}")
            time.sleep(5)

    driver.quit()
    print(f"‚ùå [{index+1}/{total_ids}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è {device_id}")
    return {"–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω": device_id}

# –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
formatted_results = defaultdict(list)

with ThreadPoolExecutor(max_workers=NUM_THREADS) as executor:
    future_to_id = {
        executor.submit(get_device_status, index, len(DEVICE_IDS), device_id): device_id
        for index, device_id in enumerate(DEVICE_IDS)
    }

    try:
        for future in as_completed(future_to_id):
            result = future.result()
            if result and isinstance(result, dict):
                for status, device_id in result.items():
                    formatted_results[status].append(device_id)

    except KeyboardInterrupt:
        print("\n‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫–∏...")
        executor.shutdown(wait=False, cancel_futures=True)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
with open("results.json", "w", encoding="utf-8") as f:
    json.dump(formatted_results, f, indent=4, ensure_ascii=False)

print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'results.json'")
